// WARNING: DO NOT EDIT THIS FILE MANUALLY!
// Please use the tool/generateAst.ts script using: `npm run ast "src/Ast"`

import { Expr } from "./Expr";
import { Token } from "../Lexer/Token";

export interface Visitor<T> {
    visitBlockStmt(stmt: Block): T;
    visitExpressionStmt(stmt: Expression): T;
    visitIfStmt(stmt: If): T;
    visitPrintStmt(stmt: Print): T;
    visitVarStmt(stmt: Var): T;
    visitWhileStmt(stmt: While): T;
}

export interface Stmt {
    accept<T>(visitor: Visitor<T>): T;
}

export class Block implements Stmt {
    public constructor(
        public readonly statements: Stmt[],
    ) { }

    public accept<T>(visitor: Visitor<T>): T {
        return visitor.visitBlockStmt(this);
    }
}

export class Expression implements Stmt {
    public constructor(
        public readonly expression: Expr,
    ) { }

    public accept<T>(visitor: Visitor<T>): T {
        return visitor.visitExpressionStmt(this);
    }
}

export class If implements Stmt {
    public constructor(
        public readonly condition: Expr,
        public readonly thenBranch: Stmt,
        public readonly elseBranch?: Stmt,
    ) { }

    public accept<T>(visitor: Visitor<T>): T {
        return visitor.visitIfStmt(this);
    }
}

export class Print implements Stmt {
    public constructor(
        public readonly expression: Expr,
    ) { }

    public accept<T>(visitor: Visitor<T>): T {
        return visitor.visitPrintStmt(this);
    }
}

export class Var implements Stmt {
    public constructor(
        public readonly name: Token,
        public readonly initializer?: Expr,
    ) { }

    public accept<T>(visitor: Visitor<T>): T {
        return visitor.visitVarStmt(this);
    }
}

export class While implements Stmt {
    public constructor(
        public readonly condition: Expr,
        public readonly body: Stmt,
    ) { }

    public accept<T>(visitor: Visitor<T>): T {
        return visitor.visitWhileStmt(this);
    }
}
